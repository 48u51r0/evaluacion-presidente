R.home(component = "home")
library("benchmarkme")
get_linear_algebra()
install.packages("benchmark")
install.packages("benchmarkme")
install.packages("benchmarkme")
library("benchmarkme")
get_linear_algebra()
res = benchmark_std() # run a suit of tests to test R's performance
res
plot(res)
plot(res)
a <- c(1,2,3)
a+1
a*2
for (i in 1:length(a)){a[i] <- a[i]+1}
a
a
`+`(1,1)
`[`(a,1)
a %>% `[`(1)
library(dplyr)
a %>% `[`(1)
function (n, min = 0, max = 1)
.Call(C_runif, n, min, max)
library("compiler")
library("memoise")
"compiler" %in% installed.packages()
"memoise" %in% installed.packages()
"asdffgwd" %in% installed.packages()
"pryr" %in% installed.packages()
library("pryr")
install.packages("pryr")
install.packages("microbenchmark")
a <- c(1,2)
b <- c(3,4,5,6,7,8)
a+b
c <- c(3,4,5)
a+c
a^2
a
c
sum(c==4)
sum(c<=4)
runif(10)
runif(10, 0, 10)
runif(10, min= 0, max=10)
set.seed(123)
runif(10, min= 0, max=10)
runif(10, min= 0, max=10)
runif(10, min= 0, max=10)
install.packages("vistime")
library(vistime)
timeline_data <- data.frame(event = c("Event 1", "Event 2"), start = c("2020-06-06", "2020-10-01"), end = c("2020-10-01", "2020-12-31"), group = "My Events")
vistime(timeline_data)
timeline_data <- data.frame(event = c("Event 1", "Event 2"), start = c("2020-06-06", "2020-10-01"), end = c("2020-10-01", "2020-12-31"), group = "My Events")
gg_vistime(timeline_data)
timeline_data <- data.frame(event = c("Event 1", "Event 2"), start = c("2020-06-06", "2020-10-01"), end = c("2020-10-01", "2020-12-31"), group = "My Events")
vistime_data(timeline_data)
View(vistime_data(timeline_data))
pp <- plotly_build(p) # transform into a list
install.packages("vistime")
library(vistime)
library(vistime)
# presidents and vice presidents
pres <- data.frame(
Position = rep(c("President", "Vice"), each = 3),
Name = c("Washington", rep(c("Adams", "Jefferson"), 2), "Burr"),
start = c("1789-03-29", "1797-02-03", "1801-02-03"),
end = c("1797-02-03", "1801-02-03", "1809-02-03"),
color = c("#cbb69d", "#603913", "#c69c6e"),
fontcolor = c("black", "white", "black")
)
vistime(pres, col.event = "Position", col.group = "Name", title = "Presidents of the USA")
## Not run:
# Argument`optimize_y` can be used to change the look of the timeline. `TRUE` (the default)
# will find a nice heuristic to save `y`-space, distributing the events:
data <- read.csv(text="event,start,end
Phase 1,2020-12-15,2020-12-24
Phase 2,2020-12-23,2020-12-29
Phase 3,2020-12-28,2021-01-06
Phase 4,2021-01-06,2021-02-02")
vistime(data, optimize_y = TRUE)
# `FALSE` will plot events as-is, not saving any space:
vistime(data, optimize_y = FALSE)
# more complex and colorful example
data <- read.csv(text = "event,group,start,end,color
Phase 1,Project,2018-12-22,2018-12-23,#c8e6c9
Phase 2,Project,2018-12-23,2018-12-29,#a5d6a7
Phase 3,Project,2018-12-29,2019-01-06,#fb8c00
Phase 4,Project,2019-01-06,2019-02-02,#DD4B39
Room 334,Team 1,2018-12-22,2018-12-28,#DEEBF7
Room 335,Team 1,2018-12-28,2019-01-05,#C6DBEF
Room 335,Team 1,2019-01-05,2019-01-23,#9ECAE1
Group 1,Team 2,2018-12-22,2018-12-28,#E5F5E0
Group 2,Team 2,2018-12-28,2019-01-23,#C7E9C0
3-200,category 1,2018-12-25,2018-12-25,#1565c0
3-330,category 1,2018-12-25,2018-12-25,#1565c0
3-223,category 1,2018-12-28,2018-12-28,#1565c0
3-225,category 1,2018-12-28,2018-12-28,#1565c0
3-226,category 1,2018-12-28,2018-12-28,#1565c0
3-226,category 1,2019-01-19,2019-01-19,#1565c0
3-330,category 1,2019-01-19,2019-01-19,#1565c0
1-217.0,category 2,2018-12-27,2018-12-27,#90caf9
3-399.7,moon rising,2019-01-13,2019-01-13,#f44336
8-831.0,sundowner drink,2019-01-17,2019-01-17,#8d6e63
9-984.1,birthday party,2018-12-22,2018-12-22,#90a4ae
F01.9,Meetings,2018-12-26,2018-12-26,#e8a735
Z71,Meetings,2019-01-12,2019-01-12,#e8a735
B95.7,Meetings,2019-01-15,2019-01-15,#e8a735
T82.7,Meetings,2019-01-15,2019-01-15,#e8a735")
vistime(data)
# presidents and vice presidents
pres <- data.frame(
Position = rep(c("President", "Vice"), each = 3),
Name = c("Washington", rep(c("Adams", "Jefferson"), 2), "Burr"),
start = c("1789-03-29", "1797-02-03", "1801-02-03"),
end = c("1797-02-03", "1801-02-03", "1809-02-03"),
color = c("#cbb69d", "#603913", "#c69c6e"),
fontcolor = c("black", "white", "black")
)
vistime(pres, col.event = "Position", col.group = "Name", title = "Presidents of the USA")
library(vistime)
pres <- data.frame(
Position = rep(c("President", "Vice"), each = 3),
Name = c("Washington", rep(c("Adams", "Jefferson"), 2), "Burr"),
start = c("1789-03-29", "1797-02-03", "1801-02-03"),
end = c("1797-02-03", "1801-02-03", "1809-02-03"),
color = c("#cbb69d", "#603913", "#c69c6e"),
fontcolor = c("black", "white", "black")
)
vistime(pres, col.event = "Position", col.group = "Name", title = "Presidents of the USA")
gg_vistime(data, optimize_y = TRUE)
gg_vistime(pres, col.event = "Position", col.group = "Name", title = "Presidents of the USA")
a <- gg_vistime(pres, col.event = "Position", col.group = "Name", title = "Presidents of the USA")
class(a)
p <- plot_ly(diamonds[1:1000, ], x = ~x, y = ~cut, color = ~color) %>% add_bars()
p
p <- plot_ly(diamonds[1:1000, ], x = ~x, y = ~cut, color = ~color) %>% add_bars()
install.packages(plotly)
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
library(plotly)
p <- plot_ly(diamonds[1:1000, ], x = ~x, y = ~cut, color = ~color) %>% add_bars()
p
p <- layout(p, shapes = list(type = "line", fillcolor = "red",
line = list(color = "red"),
opacity = 1,
x0 = 3, x1 = 3, xref = 'x',
y0 = -0.5, y1 = 4.5, yref = 'y'))
p
p <- plot_ly(diamonds[1:1000, ], x = ~x, y = ~cut, color = ~color) %>% add_bars()
p <- layout(p, shapes = list(type = "line", fillcolor = "red",
line = list(color = "red"),
opacity = 1,
x0 = 10, x1 = 20, xref = 'x',
y0 = -0.5, y1 = 4.5, yref = 'y'))
p
p <- plot_ly(diamonds[1:1000, ], x = ~x, y = ~cut, color = ~color) %>% add_bars()
p <- layout(p, shapes = list(type = "line", fillcolor = "red",
line = list(color = "red"),
opacity = 1,
x0 = 10, x1 = 20, xref = 'x',
y0 = -0.5, y1 = 2, yref = 'y'))
p
Sys.setlocale("LC_TIME")
Sys.setlocale("LC_TIME", "Spanish")
timeline_data <- data.frame(event = c("Event 1", "Event 2"), start = c("2020-06-06", "2020-10-01"), end = c("2020-10-01", "2020-12-31"), group = "My Events")
vistime(timeline_data)
library(vistime)
library(vistime)timeline_data <- data.frame(event = c("Event 1", "Event 2"), start = c("2020-06-06", "2020-10-01"), end = c("2020-10-01", "2020-12-31"), group = "My Events")
vistime(timeline_data)
timeline_data <- data.frame( = c("Event 1", "Event 2"), start = c("2020-06-06", "2020-10-01"), end = c("2020-10-01", "2020-12-31"), group = "My Events")
gg_vistime(timeline_data)
rm(list = ls())
# loading library of functions
source("Scripts/libs.R")
# Specify and install all the necessary packages
packages <- (c("weights","haven", "sandwich", "multcomp", "emmeans",
"tidyverse", "conflicted", "ggeffects", "splines",
"robustbase", "stargazer", "vistime"))
install_pack(packages)
# Solve conflicts between packages
masked_functions()
# Load data sets the name of which starts with "df_"
load_data("df_")
# Clean auxiliary functions(lsf.str) and objects
rm(list = c(lsf.str(), "packages"))
install.packages("readxl")
install.packages("readxl")
backup_3269 <- readRDS("C:/Users/Usuario/OneDrive - Universidad Complutense de Madrid (UCM)/R_projects/EvaluacionPresidente/evaluacion-presidente/backup_3269.rds")
names(backup_3269)
min(backup_3269$FECHAINI)
max(backup_3269$FECHAFIN)
unique(backup_3269$FECHAFIN)
max(backup_3269$FECHAFIN, 2)
class(unique(backup_3269$FECHAFIN)[1])
backup_3271 <- readRDS("C:/Users/Usuario/OneDrive - Universidad Complutense de Madrid (UCM)/R_projects/EvaluacionPresidente/evaluacion-presidente/backup_3271.rds")
min(backup_3271$FECHAINI)
unique(backup_3271$FECHAINI)
unique(backup_3269$FECHAINI)
unique(backup_3271$FECHAINI)
unique(backup_3271$FECHAFIN)
backup_3273 <- readRDS("C:/Users/Usuario/OneDrive - Universidad Complutense de Madrid (UCM)/R_projects/EvaluacionPresidente/evaluacion-presidente/backup_3273.rds")
unique(backup_3273$FECHAINI)
unique(backup_3273$FECHAFIN)
backup_3277 <- readRDS("C:/Users/Usuario/OneDrive - Universidad Complutense de Madrid (UCM)/R_projects/EvaluacionPresidente/evaluacion-presidente/backup_3277.rds")
unique(backup_3277$FECHAFIN)
unique(backup_3277$FECHAINI)
backup_3279 <- readRDS("C:/Users/Usuario/OneDrive - Universidad Complutense de Madrid (UCM)/R_projects/EvaluacionPresidente/evaluacion-presidente/backup_3279.rds")
unique(backup_3279$FECHAINI)
unique(backup_3279$FECHAFIN)
backup_3281 <- readRDS("C:/Users/Usuario/OneDrive - Universidad Complutense de Madrid (UCM)/R_projects/EvaluacionPresidente/evaluacion-presidente/backup_3281.rds")
unique(backup_3281$FECHAFIN)
unique(backup_3281$FECHAINI)
# leemos el excel con los datos del timeline
data <- readxl::read_xlsx("timeline.xlsx")
# leemos el excel con los datos del timeline
data <- readxl::read_xlsx("timeline.xlsx")
getwd()
setwd("C:/Users/Usuario/OneDrive - Universidad Complutense de Madrid (UCM)/R_projects/EvaluacionPresidente/evaluacion-presidente")
# leemos el excel con los datos del timeline
data <- readxl::read_xlsx("timeline.xlsx")
library(readxl)
timeline <- read_excel("timeline.xlsx")
View(timeline)
# leemos el excel con los datos del timeline
data <- readxl::read_xlsx("timeline.xlsx")
data
class(data$start)
gg_vistime(data)
library(vistime)
# leemos el excel con los datos del timeline
data <- readxl::read_xlsx("timeline.xlsx")
gg_vistime(data)
library(ggrepel)
gg_vistime(data)+ geom_text_repel()
# para generar los timeline con fechas en espaÃ±ol
Sys.setlocale("LC_TIME", "Spanish")
data <- readxl::read_xlsx("timeline.xlsx")
a <- gg_vistime(data)
a
gg_vistime(data)+ geom_text_repel()
gg_vistime(data)+ geom_text_repel(aes(label = event))
gg_vistime(data, show_labels = FALSE)+ geom_text_repel()
gg_vistime(data, show_labels = FALSE)+ geom_text_repel(aes(label = event))
gg_vistime(data, show_labels = FALSE)+ geom_text_repel(aes(label = event), color = "black")
gg_vistime(data, show_labels = FALSE)+
geom_text_repel(aes(label = event), color = "black") +
geom_vline(data = data[data$group == "Hitos", ],
mapping = aes(xintercept = start)
)
gg_vistime(data, show_labels = FALSE)+
geom_text_repel(aes(label = event), color = "black") +
geom_vline(data = data[data$group == "Hitos", ],
mapping = aes(xintercept = start, color=event)
)
a <- gg_vistime(data, show_labels = FALSE)
gg_vistime(data)+ geom_text_repel(aes(label = event))
a
str(a)
package_version("vistime")
package_version(vistime)
gg_vistime(data,
show_labels = FALSE,
col.group = "color")
Sys.setlocale("LC_TIME", "Spanish")
# leemos el excel con los datos del timeline
data <- readxl::read_xlsx("timeline.xlsx")
a <- gg_vistime(data,
show_labels = FALSE,
col.group = "color")
a
gg_vistime(data, show_labels = FALSE)+
geom_text_repel(aes(label = event), color = "black") +
geom_vline(data = data[data$group == "Hitos", ],
mapping = aes(xintercept = start, color=event)
)
gg_vistime(data,
show_labels = FALSE,
col.group = "color")
gg_vistime(data,
show_labels = FALSE,
col.color =  = "color")
gg_vistime(data,
show_labels = FALSE,
col.color = "color")
gg_vistime(data,
show_labels = FALSE,
col.color = "color")+
geom_text_repel(aes(label = event), color = "black") +
geom_vline(data = data[data$group == "Hitos", ],
mapping = aes(xintercept = start),
color= "grey69"
)
gg_vistime(data,
show_labels = FALSE,
col.color = "color",background_lines = 0)+
geom_text_repel(aes(label = event), color = "black") +
geom_vline(data = data[data$group == "Hitos", ],
mapping = aes(xintercept = start),
color= "grey69"
)
data <- readxl::read_xlsx("timeline.xlsx")
a <- gg_vistime(data,
show_labels = FALSE,
col.color = "color",
background_lines = 0,
)+
geom_text_repel(aes(label = event), color = "black") +
geom_vline(data = data[data$group == "Hitos", ],
mapping = aes(xintercept = start),
color= "grey69"
)
# leemos el excel con los datos del timeline
data <- readxl::read_xlsx("timeline.xlsx")
a
gg_vistime(data,
show_labels = FALSE,
col.color = "color",
background_lines = 0,
)+
geom_text_repel(aes(label = event),
color = "black",
force = 2) +
geom_vline(data = data[data$group == "Hitos", ],
mapping = aes(xintercept = start),
color= "grey69"
)
gg_vistime(data,
show_labels = FALSE,
col.color = "color",
background_lines = 0,
)+
geom_text_repel(aes(label = event),
color = "black",
force = 2,
nudge_y = 0.5) +
geom_vline(data = data[data$group == "Hitos", ],
mapping = aes(xintercept = start),
color= "grey69"
)
gg_vistime(data,
show_labels = FALSE,
col.color = "color",
background_lines = 0,
)+
geom_text_repel(aes(label = event),
color = "black",
force = 2,
nudge_y = 1) +
geom_vline(data = data[data$group == "Hitos", ],
mapping = aes(xintercept = start),
color= "grey69"
)
gg_vistime(data,
show_labels = FALSE,
col.color = "color",
background_lines = 0,
)+
geom_text_repel(aes(label = event),
color = "black",
force = 2,
nudge_y = 1,
box.padding = 1) +
geom_vline(data = data[data$group == "Hitos", ],
mapping = aes(xintercept = start),
color= "grey69"
)
data <- readxl::read_xlsx("timeline.xlsx")
a <- gg_vistime(data,
show_labels = FALSE,
col.color = "color",
background_lines = 0,
)+
geom_text_repel(aes(label = event),
color = "black",
force = 2,
nudge_y = 1,
box.padding = 1) +
geom_vline(data = data[data$group == "Hitos", ],
mapping = aes(xintercept = start),
color= "grey69"
)
a
data <- readxl::read_xlsx("timeline.xlsx")
a <- gg_vistime(data,
show_labels = FALSE,
col.color = "color",
background_lines = 0,
)+
geom_text_repel(aes(label = event),
color = "black",
force = 2,
nudge_y = 1,
box.padding = 1,
arrow = FALSE) +
geom_vline(data = data[data$group == "Hitos", ],
mapping = aes(xintercept = start),
color= "grey69"
)
a
data <- readxl::read_xlsx("timeline.xlsx")
a <- gg_vistime(data,
show_labels = FALSE,
col.color = "color",
background_lines = 0,
)+
geom_text_repel(aes(label = event),
color = "black",
force = 2,
nudge_y = 1,
box.padding = 1,
segment.color = NA) +
geom_vline(data = data[data$group == "Hitos", ],
mapping = aes(xintercept = start),
color= "grey69"
)
a
data <- readxl::read_xlsx("timeline.xlsx")
gg_vistime(data,
show_labels = FALSE,
col.color = "color",
background_lines = 0,
)+
geom_text_repel(aes(label = event),
color = "black",
force = 2,
nudge_y = 1,
box.padding = 1,
segment.color = NA) +
geom_vline(data = data[data$group == "Hitos", ],
mapping = aes(xintercept = start),
color= "grey69"
)
data <- readxl::read_xlsx("timeline.xlsx")
gg_vistime(data,
show_labels = FALSE,
col.color = "color",
background_lines = 0,
)+
geom_text_repel(aes(label = event),
color = "black",
force = 2,
box.padding = 1,
segment.color = NA) +
geom_vline(data = data[data$group == "Hitos", ],
mapping = aes(xintercept = start),
color= "grey69"
)
gg_vistime
data <- readxl::read_xlsx("timeline.xlsx")
gg_vistime(data,
show_labels = FALSE,
col.color = "color",
background_lines = 0,
optimize_y = TRUE)+
geom_text_repel(aes(label = event),
color = "black",
force = 2,
box.padding = 1,
segment.color = NA) +
geom_vline(data = data[data$group == "Hitos", ],
mapping = aes(xintercept = start),
color= "grey69"
)
# Start-up
rm(list = ls())
source("Scripts/libs.R")
# Specify and install all the necessary packages
packages <- (c("weights","haven", "sandwich", "multcomp", "emmeans",
"tidyverse", "conflicted", "ggeffects", "splines",
"robustbase", "stargazer", "vistime",
"ggrepel"))
install_pack(packages)
# para generar los timeline con fechas en espaÃ±ol
Sys.setlocale("LC_TIME", "Spanish")
# leemos el excel con los datos del timeline
data <- readxl::read_xlsx("timeline.xlsx")
gg_vistime(data,
show_labels = FALSE,
col.color = "color",
background_lines = 0,
optimize_y = TRUE)+
geom_text_repel(aes(label = event),
color = "black",
force = 2,
box.padding = 1,
segment.color = NA) +
geom_vline(data = data[data$group == "Hitos", ],
mapping = aes(xintercept = start),
color= "grey69"
)
# Una vez finalizado retornamos la configuraciÃ³n inglesa
Sys.setlocale("LC_TIME", "English")
gg_vistime(data,
show_labels = FALSE,
col.color = "color",
background_lines = 0,
optimize_y = TRUE)+
geom_text_repel(aes(label = event),
color = "black",
force = 2,
box.padding = 1,
segment.color = NA) +
geom_vline(data = data[data$group == "Hitos", ],
mapping = aes(xintercept = start),
color= "grey69",
alpha = 0.5
)
